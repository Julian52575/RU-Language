const express = require('express');
const cors = require('cors')
const bodyParser = require('body-parser');
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const os = require('os');
const app = express();
const port = 3000;

app.use(cors());
app.use(bodyParser.json());

app.get('/', (req, res) => {
  res.send('Hello from Express API!');
});

app.post('/lisp', (req, res) => {
  console.log(req.body);

  const command = path.join(__dirname + "/binaries", 'my-lisp-interpreter-exe'); // interpretor should be in express-api/binaries
  try {

    const process = spawn(command);

    process.stdin.write(req.body.code);
    process.stdin.end();

    let output = '';
    let errorOutput = '';

    process.stdout.on('data', (data) => {
      output += data.toString();
    });

    process.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });

    process.on('close', (code) => {
      if (code !== 0) {
        console.error(`Process exited with code ${code}`);
        return res.status(500).json({ error: errorOutput || 'Internal Server Error' });
      }
      res.json({ output });
    });

    process.on('error', (err) => {
      console.error(`Failed to start process: ${err}`);
      res.status(500).json({ error: 'Failed to start process' });
    });
  }
  catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.post('/ru', (req, res) => {
  try {
    const compiler = path.join(__dirname + "/binaries", 'rucompiler'); // compiler should be in express-api/binaries
    const virtualMachine = path.join(__dirname + "/binaries", 'ruvm'); // virtual machine should be in express-api/binaries

    const code = req.body.code;
    const inputFilePath = path.join(__dirname + "/binaries", 'input.ru'); // input file for the compiler
    const outputFilePath = path.join(__dirname , 'out.izly'); // output file generated by the compiler

    fs.writeFileSync(inputFilePath, code);

    const compileProcess = spawn(compiler, [inputFilePath]);

    let compileErrorOutput = '';

    compileProcess.stderr.on('data', (data) => {
      compileErrorOutput += data.toString();
    });

    compileProcess.on('close', (code) => {
      if (code !== 0) {
        console.error(`Compiler process exited with code ${code}`);
        console.error(`Compiler error output: ${compileErrorOutput}`);
        return res.status(500).json({ error: 'Compilation failed', details: compileErrorOutput });
      }

      // Check if the output file was created
      if (!fs.existsSync(outputFilePath)) {
        console.error('Output file not found after compilation');
        return res.status(500).json({ error: 'Compilation failed: output file not found' });
      }

      const runProcess = spawn(virtualMachine, [outputFilePath]);

      let output = '';
      let errorOutput = '';

      runProcess.stdout.on('data', (data) => {
        output += data.toString();
      });

      runProcess.stderr.on('data', (data) => {
        errorOutput += data.toString();
      });

      console.log(output);
      console.log(errorOutput);

      runProcess.on('error', (err) => {
        console.error(`Failed to start virtual machine process: ${err}`);
        res.status(500).json({ error: 'Failed to start virtual machine process' });
      });

      runProcess.on('close', (code) => {
        if (code !== 0) {
          console.error(`Virtual machine process exited with code ${code}`);
          return res.status(500).json({ error: errorOutput || 'Execution failed' });
        }
        res.json({ output });
      });
    });

    compileProcess.on('error', (err) => {
      console.error(`Failed to start compiler process: ${err}`);
      res.status(500).json({ error: 'Failed to start compiler process' });
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.listen(port, () => {
  console.log(`Express API running on http://localhost:${port}`);
});
